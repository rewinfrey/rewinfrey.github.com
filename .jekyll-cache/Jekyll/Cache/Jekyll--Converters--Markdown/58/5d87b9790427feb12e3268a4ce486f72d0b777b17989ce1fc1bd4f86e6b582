I"I<p>Although it was a short week, I was able to get quite a bit finished on my Limelight interface and feel good about the progress on my user stories. I still have a couple bigger challenges left to implement, but I’m looking forward to them. The end result will be a Tic Tac Toe library that has a command line interface (CLI), Rails interface and a Limelight interface. The library supports viewing a game’s move history, or the ability to load a previously played game. There are three levels of AI to play against (easy, medium and unbeatable). There are also three different types of boards to play on (3x3, 4x4 or a 3x3x3).</p>

<p>Today I learned the difference between Ruby’s <code class="language-plaintext highlighter-rouge">undef_method</code> and <code class="language-plaintext highlighter-rouge">remove_method</code>. Both methods affect the method defined list of a class, but there is an important difference in how the method lookup operation occurs when a method has been undefined or removed.</p>

<p>Let’s use an example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Parent
  def who_am_i?
    puts "This is parent."
  end
end

class Child1 &lt; Parent
  def who_am_i?
    puts "This is child1."
  end
end

class Child2 &lt; Parent
  def who_am_i?
    puts "This is child2."
  end
end

child1 = Child1.new
child2 = Child2.new

child1.who_am_i? # =&gt; "This is child1."
child2.who_am_i? # =&gt; "This is child2."
</code></pre></div></div>

<p>This is a simple example showing that both Child1 and Child2 classes have redefined the method <code class="language-plaintext highlighter-rouge">who_am_i?</code> they’ve inherited from the Parent class.</p>

<p>Let’s see what happens when we use <code class="language-plaintext highlighter-rouge">undef_method</code> on Child1:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Child1
  undef_method :who_am_i?
end

child1.who_am_i? # =&gt; undefined method `who_am_i?' for #&lt;Child1:0x007f991188ff48&gt; (NoMethodError)
</code></pre></div></div>

<p>But what happens if we use <code class="language-plaintext highlighter-rouge">remove_method</code> on child2:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Child2
  remove_method :who_am_i?
end

child2.who_am_i? # =&gt; "This is parent."
</code></pre></div></div>

<p>The difference is important. With <code class="language-plaintext highlighter-rouge">undef_method</code> the method is removed from the class, and when that method is invoked a NoMethodError is raised. With <code class="language-plaintext highlighter-rouge">remove_method</code> the method is also removed from the class, but if that method is defined by an ancestor of the class, then the ancestor defined method is invoked. That’s why <code class="language-plaintext highlighter-rouge">child2.who_am_i?</code> returns “This is parent” but <code class="language-plaintext highlighter-rouge">child1.who_am_i?</code> raises a NoMethodError.</p>
:ET
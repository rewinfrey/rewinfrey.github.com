I"†2<p>So far we‚Äôve looked at <a href="http://selfless-singleton.rickwinfrey.com/2012/12/03/building-solid-foundations-of-oop/">Single Responsibility Principle</a> and the <a href="http://selfless-singleton.rickwinfrey.com/2012/12/04/building-solid-foundations-of-oop-part-2-ocp/">Open / Closed Principle</a>, which brings us to the ‚ÄúL‚Äù of SOLID, the <a href="https://docs.google.com/a/8thlight.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/edit?hl=en">Liskov Substitution Principle</a>.</p>

<p>The Liskov Substitution Principle (LSP) is named after <a href="http://www.pmg.csail.mit.edu/~liskov/">Barbara Liskov</a>. She first introduced the idea that became the Liskov Substitution Principle in 1988 with a description of a particular scenario:</p>

<blockquote>
  <p>What is wanted here is something like the following substitution property: If for each object O<sub>1</sub> of type S there is an object O<sub>2</sub> of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when O<sub>1</sub> is substituted for O<sub>2</sub> then S is a subtype of T.</p>
</blockquote>

<p>That‚Äôs cool, and perfectly clear, but how about a little more simple way of thinking about it?</p>

<blockquote>
  <p>If my cookie jar takes cookies, and I can fit a Girl Scout thin mint cookie into my cookie jar, and I can also fit an Oreo into my cookie jar, then in the context of my cookie jar, thin mints and Oreos are subtypes of each other.</p>
</blockquote>

<p>This example is a little contrived, because there are plenty of ways in which we could also say a thin mint cookie is not a subtype of an Oreo, but if our application is a cookie jar, and our expected behavior for cookies is that they fit into the cookie jar, then thin mints and Oreos are subtypes. This is still an abstract idea though, which is good, we want to embrace abstraction as one of the greatest tools we get to use as a OOP developer. However, to further flush out the idea of LSP, let‚Äôs talk about a simple, physical example:</p>

<p><a href="http://i.imgur.com/xCkwF.jpg">&lt;div style="display: inline-block; width: 300px; margin: 20px 60px;"&gt;<img src="http://i.imgur.com/xCkwF.jpg" />&lt;/div&gt;</a>
<span style="font-size: 50px; padding-bottom: 100px;">vs.</span>
<a href="http://i.imgur.com/vUERa.jpg">&lt;div style="display: inline-block; width: 300px; margin: 20px 60px;"&gt;<img src="http://i.imgur.com/vUERa.jpg" />&lt;/div&gt;</a></p>

<p>In some ways flour and sugar are subtypes of each other, depending on how we define them and what we expect of them. Both products are white, and have similar textures, are both used in baking, and both are derived from plants. Based on this set of criteria, we might be tempted to think we could easily substitute sugar for flour, or flour for sugar with no negative side effects. That is until we wanted to make cookies, but discovered to our dismay that we had run out of sugar last week, and being one of those items that isn‚Äôt bought often, was sadly left off the grocery list for yesterday‚Äôs shopping trip. We might ask ourselves, what could we substitute for sugar? We see flour in the cupboard, would that work? Well, the obvious answer is no, but that‚Äôs because our brains are smart and understand how to look at similarities and differences at the same time. A program is only as smart as we make it, however, and unless we specifically made our program aware that flour is not a suitable substitute for sugar, it would use flour.</p>

<p>This example serves to highlight a very important fact about LSP - context. In determining if two classes are subtypes of each other, we need to understand the context in which we‚Äôre making expectations on them. If we expect two classes to act in the same so that we can consider them to be subtypes, we must not only be careful in how we define our classes, but also how we define the contexts in which they behave.</p>

<p>We‚Äôve said before that abstraction is our friend in the world of OOP, and having properly defined abstractions in our applications allows us to preserve LSP. I figure this is as good a time as any to list the three main benefits of OOP:</p>

<ol>
  <li>
    <p><strong>Encapsulation</strong> (classes) give our objects purpose and direction, and create contexts in which the various objects of applications carry expectations of the messages they are capable of sending and receiving. Classes are the logical building blocks of our application‚Äôs design.</p>
  </li>
  <li>
    <p><strong>Inheritance</strong> serves as the core foundation for creating abstractions. With inheritance, we can define abstract interfaces that concrete classes inherit. This gives our classes pre-defined behavior via a minimum set of virtual methods (defined, but unimplemented methods). Inheritance defines how related classes should behave without needing to concretely define that behavior for each class (think <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>).</p>
  </li>
  <li>
    <p><strong>Polymorphism</strong> extends the use of inheritance by allowing us to customize how various pre-defined behaviors are implemented in our concrete classes. Most commonly this is achieved through <a href="http://en.wikipedia.org/wiki/Method_overriding">method over-riding</a>.</p>
  </li>
</ol>

<p>With flour and sugar in mind, the importance of context, and our three benefits of OOP, let‚Äôs take a look at some code. In <a href="http://selfless-singleton.rickwinfrey.com/2012/12/04/building-solid-foundations-of-oop-part-2-ocp/">yesterday‚Äôs post</a> we worked with our CheckingAccount example to show how we could preserve SRP and OCP by building an interface. This interface allowed us to <em>extend</em> CheckingAccount without <em>modifying</em> it. We completed our user story requesting a monthly playment feature, and the client was happy with the feature demo. At this week‚Äôs iteration planning meeting, a new user story emerged:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a bank
I want the ability to calculate interest earned for both checking and savings accounts
</code></pre></div></div>

<p>Hmm, well so far we‚Äôve only been concerned with checking accounts, but now we are to add savings accounts into the mix, and calculate interest earned. Now feeling more comfortable with abstraction in OOP along with SRP and OCP, we think of a few options:</p>

<ol>
  <li>Create a new SavingsAccount class.</li>
  <li>Create an Account superclass to serve as an abstract interface for both CheckingAccount and SavingsAccount.</li>
  <li>Create an interface for CheckingAccount and SavingsAccount classes to talk with our CalcMonthlyInterest class.</li>
</ol>

<p>Let‚Äôs look at each option. Does simply creating a new SavingsAccount class right now violate any of the SOLID principles? Nope, and it is an excellent example of SRP and if we play our cards right, also LSP. Does providing an abstract interface for CheckingAccount and SavingsAccount violate any of the SOLID principles? Nope, and if we consider that our SavingsAccount class will have very similar behavior to that of our CheckingAccount class, we consider this to be a good way to preserve the DRY principle while reinforcing LSP (both checking and savings accounts are subtypes for each other if we carefully design interfaces for them). It also has the added bonus of taking advantage of one of OOP‚Äôs benefits - inheritance.</p>

<p>But what about the third option? Does creating an interface for CheckingAccount and SavingsAccount classes to talk with our CalcMonthlyInterest class preserve SOLID principles? Yes, and it is another example of how we can preserve the Open / Closed Principle. In this case, we decide it‚Äôs a good idea to build a SavingsAccount class, an Account super class, and implement an interface for another new class we are to create, CalcMonthlyInterest. Let‚Äôs get started.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Account
  attr_accessor :owner, :balance, :account_num, :routing_num
  def initialize(options)
    self.owner       = options[:owner]
    self.balance     = options[:balance]
    self.account_num = options[:account_num]
    self.routing_num = options[:routing_num]
  end

  def debit(amount)
    self.balance -= amount
  end

  def deposit(amount)
    self.balance += amount
  end
end
</code></pre></div></div>

<p>Look familiar? It‚Äôs identical to our current CheckingAccount class. Here we reason that all accounts will at least utilize the basic behaviors of depositing and debiting, and will need to contain the owner‚Äôs name, balance, account number and routing number. Other than that, we can allow different account types to add more specific behavior as they need it when we create those classes. Now that we have Account superclass to inherit from, let‚Äôs see how CheckingAccount and SavingsAccount appear now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class CheckingAccount &lt; Account
end

class SavingsAccount &lt; Account
end
</code></pre></div></div>

<p>With inheritance, we‚Äôve managed to abstract the behaviors and data of CheckingAccount and SavingsAccount. As they stand at this time both classes are subtypes of each other, meaning they can be substituted for each other given the right context. This might look funny, but the distinction between name spaces is important. We also don‚Äôt know what types of accounts we may need to account for in the future with our application. It might turn out that other accounts will require more complex behavior than our Account superclass defines, but will still require the fundamental behaviors of debit and deposit.</p>

<p>Now that we have a SavingsAccount class and an Account superclass, let‚Äôs think about the interface between our accounts and CalcMonthlyInterest. In this case, I‚Äôd prefer to use a <a href="http://en.wikipedia.org/wiki/Top-down_and_bottom-up_design">top-down development</a> approach. Basically I want to think through what my application needs starting at the highest level of abstraction (the interface) and what messages I want to send to the next level of abstraction (the CalcMonthlyInterest class). For a very interesting read, check out the article <a href="http://worrydream.com/LadderOfAbstraction/">Up and Down the Ladder of Abstraction</a> written by the equally thought provoking dude, <a href="https://vimeo.com/36579366">Brett Victor</a>. Since we have so far preserved LSP, our interface can handle both account types like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class AccountCalcMonthlyInterestInterface
  attr_accessor :account, :calc_monthly_interest
  def initialize(options)
    self.account               = options[:account]
    self.calc_monthly_interest = CalcMonthlyInterest.new
  end

  def apply_interest
    if account.class == "CheckingAccount"
      calc_monthly_interest.apply_checking_interest(account)
    else
      calc_monthly_interest.apply_savings_interest(account)
    end
  end
end
</code></pre></div></div>

<p>We followed the basic ideas of the SOLID principles we have learned so far, but something still doesn‚Äôt quite seem right about this code. Even without implementing the CalcMonthlyInterest class, we see a big ‚Äúif‚Äù conditional statement in our <code class="language-plaintext highlighter-rouge">apply_interest</code> method. All of a sudden, we see that our CheckingAccount and SavingsAccount classes really aren‚Äôt that substitutable because checking accounts have a different interest rate calculation than savings accounts do. Now our AccountCalcMonthlyInterestInterface class requires <em>knowing</em> what kind of account it‚Äôs dealing with. Even though at this time this ‚Äúif‚Äù conditional is fairly simple, it can quickly grow out of control. This is because as we add more account types to our application, we will be required to continue performing conditional checks like this, until we find ourselves in very long chains of conditional checking that are a headache to sort through.</p>

<p>Are CheckingAccount and SavingsAccount really not subtypes of each other afterall? Well, we know that CheckingAccount and SavingsAccount are defined in the same way, and so they should be subtypes. Yet, the context in which we expect them to be subtypes is not so well defined, and suddenly we violate LSP. What can we do in this situation? The solution will appear tomorrow when we dive into the Interface Segregation Principle. Consider this user story half-complete, it‚Äôs already 5:30 pm and you desperately want to catch the <a href="http://www.turingfilm.com/">Alan Turing film</a> being screened later in the evening‚Ä¶</p>
:ET